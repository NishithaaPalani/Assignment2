{"version":3,"sources":["logo.svg","Form.js","App.js","registerServiceWorker.js","index.js"],"names":["Form","state","firstName","lastName","username","email","password","change","e","props","onChange","target","name","value","setState","onSubmit","preventDefault","placeholder","this","type","onClick","React","Component","App","fields","updatedValue","className","JSON","stringify","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.35649079.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from \"react\";\n\nexport default class Form extends React.Component {\n  state = {\n    firstName: \"\",\n    lastName: \"\",\n    username: \"\",\n    email: \"\",\n    password: \"\"\n  };\n\n  change = e => {\n    this.props.onChange({ [e.target.name]: e.target.value });\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n    // this.props.onSubmit(this.state);\n    this.setState({\n      firstName: \"\",\n      lastName: \"\",\n      username: \"\",\n      email: \"\",\n      password: \"\"\n    });\n    this.props.onChange({\n      firstName: \"\",\n      lastName: \"\",\n      username: \"\",\n      email: \"\",\n      password: \"\"\n    });\n  };\n\n  render() {\n    return (\n      <form>\n        <input\n          name=\"firstName\"\n          placeholder=\"First name\"\n          value={this.state.firstName}\n          onChange={e => this.change(e)}\n        />\n        <br />\n        <input\n          name=\"lastName\"\n          placeholder=\"Last name\"\n          value={this.state.lastName}\n          onChange={e => this.change(e)}\n        />\n        <br />\n        <input\n          name=\"username\"\n          placeholder=\"Username\"\n          value={this.state.username}\n          onChange={e => this.change(e)}\n        />\n        <br />\n        <input\n          name=\"email\"\n          placeholder=\"Email\"\n          value={this.state.email}\n          onChange={e => this.change(e)}\n        />\n        <br />\n        <input\n          name=\"password\"\n          type=\"password\"\n          placeholder=\"Password\"\n          value={this.state.password}\n          onChange={e => this.change(e)}\n        />\n        <br />\n        <button onClick={e => this.onSubmit(e)}>Submit</button>\n      </form>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Form from \"./Form\";\n\nclass App extends Component {\n  state = {\n    fields: {}\n  };\n\n  onChange = updatedValue => {\n    this.setState({\n      fields: {\n        ...this.state.fields,\n        ...updatedValue\n      }\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form onChange={fields => this.onChange(fields)} />\n        <p>\n          {JSON.stringify(this.state.fields, null, 2)}\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}